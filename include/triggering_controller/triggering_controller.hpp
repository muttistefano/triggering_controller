// Copyright 2017 Open Source Robotics Foundation, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#ifndef TRIGGERING_CONTROLLER__TRIGGERING_CONTROLLER_HPP_
#define TRIGGERING_CONTROLLER__TRIGGERING_CONTROLLER_HPP_

#include <memory>
#include <string>
#include <unordered_map>
#include <vector>

#include "control_msgs/msg/dynamic_joint_state.hpp"
#include "controller_interface/controller_interface.hpp"
#include "triggering_controller/visibility_control.h"
// auto-generated by generate_parameter_library
#include "triggering_controller_parameters.hpp"
#include "rclcpp_lifecycle/lifecycle_publisher.hpp"
#include "rclcpp_lifecycle/node_interfaces/lifecycle_node_interface.hpp"
#include "realtime_tools/realtime_publisher.h"
#include "sensor_msgs/msg/joint_state.hpp"

namespace triggering_controller
{
class TriggeringController : public controller_interface::ControllerInterface
{
public:
  TRIGGERING_CONTROLLER_PUBLIC
  TriggeringController();

  TRIGGERING_CONTROLLER_PUBLIC
  controller_interface::InterfaceConfiguration command_interface_configuration() const override;

  TRIGGERING_CONTROLLER_PUBLIC
  controller_interface::InterfaceConfiguration state_interface_configuration() const override;

  TRIGGERING_CONTROLLER_PUBLIC
  controller_interface::return_type update(
    const rclcpp::Time & time, const rclcpp::Duration & period) override;

  TRIGGERING_CONTROLLER_PUBLIC
  controller_interface::CallbackReturn on_init() override;

  TRIGGERING_CONTROLLER_PUBLIC
  controller_interface::CallbackReturn on_configure(
    const rclcpp_lifecycle::State & previous_state) override;

  TRIGGERING_CONTROLLER_PUBLIC
  controller_interface::CallbackReturn on_activate(
    const rclcpp_lifecycle::State & previous_state) override;

  TRIGGERING_CONTROLLER_PUBLIC
  controller_interface::CallbackReturn on_deactivate(
    const rclcpp_lifecycle::State & previous_state) override;

protected:
  bool init_joint_data();
  bool use_all_available_interfaces() const;

protected:

  std::shared_ptr<ParamListener> param_listener_;
  Params params_;
  std::unordered_map<std::string, std::string> map_interface_to_joint_state_;

  std::vector<std::string> joint_names_;

  std::unordered_map<std::string, std::unordered_map<std::string, double>> name_if_value_mapping_;

};

}  // namespace triggering_controller

#endif  // TRIGGERING_CONTROLLER__TRIGGERING_CONTROLLER_HPP_
